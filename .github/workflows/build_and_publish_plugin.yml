name: Java CI with Gradle and Release

on:
  workflow_dispatch: # Allows manual triggering of the workflow
    inputs:
      release_version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
  push:
    tags:
      - 'v*' # Automatically triggers the workflow when a tag starting with "v" is pushed

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    permissions:
      contents: write # Required to create a release and upload artifacts

    steps:
    # Step 1: Check out the repository code
    - name: Check out code
      uses: actions/checkout@v4

    # Step 2: Set up JDK 21
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: gradle

    # Step 3: Set up Gradle
    - name: Set up Gradle
      uses: gradle/actions/setup-gradle@v4.0.0

    # Step 4: Build the Shadow JAR
    - name: Build Fat JAR with ShadowJar
      run: ./gradlew shadowJar

    # Step 5: Debug the output directory
    - name: Debug build/libs directory
      run: ls -lh build/libs || echo "Directory not found"

    # Step 6: Set release tag name
    - name: Set release version
      id: release_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.release_version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi

    # Step 7: Find JAR file
    - name: Find JAR file
      id: find-jar
      run: |
        JAR_FILE=$(find build/libs -name "*.jar" | head -n 1)
        echo "Found JAR file: $JAR_FILE"
        echo "jar_path=$JAR_FILE" >> $GITHUB_OUTPUT

    # Step 8: Create Release and Upload Assets
    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_version.outputs.version }}
        name: Release ${{ steps.release_version.outputs.version }}
        body: |
          This release includes the latest build of the permissioning plugin.
        draft: false
        prerelease: false
        files: |
          ${{ steps.find-jar.outputs.jar_path }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}